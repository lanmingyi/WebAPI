using com.gexin.rp.sdk.dto;
using com.igetui.api.openservice;
using com.igetui.api.openservice.igetui;
using com.igetui.api.openservice.igetui.template;
using com.igetui.api.openservice.igetui.template.notify;
using com.igetui.api.openservice.payload;
using System;
using System.Collections.Generic;

namespace YiTeng.Framework.Common
{
    public static class UniPush
    {
        public const string HOST = "http://api.getui.com/apiex.htm";
        public const string APPID = "twuTcxRKXPAEoMzF8Ied5";
        public const string APPKEY = "Y8QtSuSfk86FrFrVBfmok3";
        public const string AppSecret = "rJF1Y3GEhy7A0KIegkLH83";
        public const string MASTERSECRET = "GTP3m9sqIG6QNlKW3H5OM5";
        /// <summary>
        /// 推送单个用户
        /// </summary>
        /// <param name="title">标题 例如  集装罐申请流转通知</param>
        /// <param name="content">内容 例如 罐流转 </param>
        /// <param name="url">APP跳转地址 主页</param>
        /// <param name="cid">数据库pushclientid字段集合</param> 
        /// <returns>推送结果</returns>
        public static string PushMessageToSingle(string title, string content, string url, string cid)
        {
            IGtPush push = new IGtPush(HOST, APPKEY, MASTERSECRET);
            TransmissionTemplate template = TransmissionTemplateAndroidiOS(title, content, url);
            //单推消息模型
            SingleMessage message = new SingleMessage();
            //当用户不在线 是否离线存储
            message.IsOffline = true;
            //离线有效时间
            message.OfflineExpireTime = 1000 * 3600 * 12;
            message.Data = template;
            //当前网络 1wifi 2-234G 0不限制
            message.PushNetWorkType = 0;
            com.igetui.api.openservice.igetui.Target target = new com.igetui.api.openservice.igetui.Target();

            target.appId = APPID;
            target.clientId = cid;

            String pushResult = push.pushMessageToSingle(message, target);

            return pushResult;
        }
        /// <summary>
        /// 推送一批用户
        /// </summary>
        /// <param name="title">标题 例如  集装罐申请流转通知</param>
        /// <param name="content">内容 例如 罐流转 </param>
        /// <param name="url">APP跳转地址 主页</param>
        /// <param name="cids">数据库pushclientid字段集合</param> 
        /// <returns>推送结果</returns>
        public static string pushMessageToList(string title, string content, string url, string[] cids)
        {
            IGtPush push = new IGtPush(HOST, APPKEY, MASTERSECRET);
            ListMessage message = new ListMessage();
            NotificationTemplate template = NotificationTemplateAndroidiOS(title, content, url);
            message.IsOffline = true;
            message.OfflineExpireTime = 1000 * 3600 * 12;
            message.Data = template;
            message.PushNetWorkType = 0;
            List<com.igetui.api.openservice.igetui.Target> targetList = new List<com.igetui.api.openservice.igetui.Target>();

            for (int i = 0; i < cids.Length; i++)
            {
                com.igetui.api.openservice.igetui.Target target1 = new com.igetui.api.openservice.igetui.Target();
                target1.appId = APPID;
                target1.clientId = cids[i];
                targetList.Add(target1);
            }
            String contentId = push.getContentId(message);
            String pushResult = push.pushMessageToList(contentId, targetList);
            return pushResult;
        }
        /// <summary>
        /// 根据条件推送到某些条件用户
        /// </summary>
        /// <param name="title">标题 例如  集装罐申请流转通知</param>
        /// <param name="content">内容 例如 罐流转 </param>
        /// <param name="url">APP跳转地址 主页</param>
        /// <param name="provinces">省份s  北京_上海_河南  默认不传</param>
        /// <param name="platform">ANDROID   IOS  ALL   3种值  默认ALL不传</param>
        /// <returns>推送结果</returns>
        public static string pushMessageToApp(string title, string content, string url, string provinces = "", string platform = "ALL")
        {
            IGtPush push = new IGtPush(HOST, APPKEY, MASTERSECRET);
            AppMessage message = new AppMessage();
            message.Speed = 100;
            TransmissionTemplate template = TransmissionTemplateAndroidiOS(title, content, url);
            message.IsOffline = true;
            message.OfflineExpireTime = 1000 * 3600 * 12;
            message.Data = template;
            message.PushNetWorkType = 0;
            List<String> appIdList = new List<string>();
            appIdList.Add(APPID);
            //手机操作系统类型
            List<String> phoneTypeList = new List<string>();
            if (platform == "ALL")
            {
                phoneTypeList.Add("ANDROID");
                phoneTypeList.Add("IOS");
            }
            else if (platform == "ANDROID")
            {
                phoneTypeList.Add("ANDROID");
            }
            else if (platform == "IOS")
            {
                phoneTypeList.Add("IOS");
            }

            //地址
            List<String> provinceList = new List<string>();

            if (!string.IsNullOrEmpty(provinces))
            {
                string[] provincesList = provinces.Split(new[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 0; i < provincesList.Length; i++)
                {
                    provinceList.Add(provincesList[i]);
                }
            }

            //标签
            List<String> tagList = new List<string>();

            message.AppIdList = appIdList;
            message.PhoneTypeList = phoneTypeList;
            message.ProvinceList = provinceList;
            message.TagList = tagList;

            String pushResult = push.pushMessageToApp(message);
            return pushResult;
        }
        /// <summary>
        /// 模版一
        /// </summary>
        /// <param name="title">标题</param>
        /// <param name="content">内容</param>
        /// <param name="url">链接 APP中要跳转的页面</param>
        /// <returns></returns>
        public static NotificationTemplate NotificationTemplateAndroidiOS(string title, string content, string url)
        {
            NotificationTemplate template = new NotificationTemplate();
            template.AppId = APPID;
            template.AppKey = APPKEY;
            template.Title = title;
            template.Text = content;
            template.Logo = "";
            template.LogoURL = "";
            template.TransmissionType = 1;
            template.TransmissionContent = "{\"url\":\"" + url + "\"}";
            template.IsRing = true;
            template.IsVibrate = true;
            template.IsClearable = true;

            //安卓透传厂商通道
            Notify notify = new Notify();
            notify.Content = title;
            notify.Title = content;
            string newUrl = "{\"url\":\"" + url + "\"}";
            notify.Intent = $"intent:#Intent;action=android.intent.action.oppopush;launchFlags=0x14000000;component=您的安卓包名/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title={title};S.content={content};S.payload={newUrl};end";
            notify.Type = NotifyInfo.Types.Type._intent;
            template.set3rdNotifyInfo(notify);


            //苹果透传配置
            APNPayload apnpayload = new APNPayload();
            DictionaryAlertMsg alertMsg = new DictionaryAlertMsg();
            // IOS 的body用这个
            alertMsg.Body = content;
            alertMsg.ActionLocKey = "ActionLocKey";
            alertMsg.LocKey = "LocKey";
            alertMsg.addLocArg("LocArg");
            alertMsg.LaunchImage = "LaunchImage";
            //iOS8.2支持字段
            alertMsg.Title = title;
            alertMsg.TitleLocKey = "TitleLocKey";
            alertMsg.addTitleLocArg("TitleLocArg");

            apnpayload.AlertMsg = alertMsg;
            //apnpayload.Badge = 0  +1;
            apnpayload.ContentAvailable = 0;
            apnpayload.Sound = "default";
            apnpayload.addCustomMsg("payload", "{\"url\":\"" + url + "\"}");

            template.setAPNInfo(apnpayload);



            string begin = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string end = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd HH:mm:ss");
            template.setDuration(begin, end);
            return template;
        }
        /// <summary>
        /// 模版二
        /// </summary>
        /// <param name="title">标题</param>
        /// <param name="content">内容</param>
        /// <param name="url">链接</param>
        /// <returns></returns>
        public static TransmissionTemplate TransmissionTemplateAndroidiOS(string title, string content, string url)
        {
            TransmissionTemplate template = new TransmissionTemplate();
            template.AppId = APPID;
            template.AppKey = APPKEY;
            //应用启动类型，1：强制应用启动 2：等待应用启动
            template.TransmissionType = 1;
            //透传内容  
            template.TransmissionContent = "{\"url\":\"" + url + "\"}";

            //安卓透传厂商通道
            Notify notify = new Notify();
            notify.Content = title;
            notify.Title = content;
            string newUrl = "{\"url\":\"" + url + "\"}";
            notify.Intent = $"intent:#Intent;action=android.intent.action.oppopush;launchFlags=0x14000000;component=您的安卓包名/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title={title};S.content={content};S.payload={newUrl};end";
            notify.Type = NotifyInfo.Types.Type._intent;
            template.set3rdNotifyInfo(notify);

            //苹果透传配置
            APNPayload apnpayload = new APNPayload();
            DictionaryAlertMsg alertMsg = new DictionaryAlertMsg();
            // IOS 的body用这个
            alertMsg.Body = content;
            alertMsg.ActionLocKey = "ActionLocKey";
            alertMsg.LocKey = "LocKey";
            alertMsg.addLocArg("LocArg");
            alertMsg.LaunchImage = "LaunchImage";
            //iOS8.2支持字段
            alertMsg.Title = title;
            alertMsg.TitleLocKey = "TitleLocKey";
            alertMsg.addTitleLocArg("TitleLocArg");

            apnpayload.AlertMsg = alertMsg;
            //apnpayload.Badge = 0  +1;
            apnpayload.ContentAvailable = 0;
            apnpayload.Sound = "default";
            apnpayload.addCustomMsg("payload", "{\"url\":\"" + url + "\"}");

            template.setAPNInfo(apnpayload);

            string begin = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string end = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd HH:mm:ss");
            template.setDuration(begin, end);

            return template;
        }
    }
}
